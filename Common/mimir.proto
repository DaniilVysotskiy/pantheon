syntax = "proto3";

package Common;

import "atoms.proto";

service Mimir {
  rpc GetRulesets (Events_GetRulesets_Payload) returns (Events_GetRulesets_Response);
  rpc GetTimezones (Events_GetTimezones_Payload) returns (Events_GetTimezones_Response);
  rpc GetCountries (Events_GetCountries_Payload) returns (Events_GetCountries_Response);
  rpc GetEvents (Events_GetEvents_Payload) returns (Events_GetEvents_Response);
  rpc GetEventsById (Events_GetEventsById_Payload) returns (Events_GetEventsById_Response);
  rpc GetMyEvents (Players_GetMyEvents_Payload) returns (Players_GetMyEvents_Response);
  rpc GetGameConfig (Generic_Event_Payload) returns (GameConfig);
  rpc GetRatingTable (Events_GetRatingTable_Payload) returns (Events_GetRatingTable_Response);
  rpc GetLastGames (Events_GetLastGames_Payload) returns (Events_GetLastGames_Response);
  rpc GetGame (Events_GetGame_Payload) returns (Events_GetGame_Response);
  rpc GetGamesSeries (Generic_Event_Payload) returns (Events_GetGamesSeries_Response);
  rpc GetCurrentSessions (Players_GetCurrentSessions_Payload) returns (Players_GetCurrentSessions_Response);
  rpc GetAllRegisteredPlayers (Events_GetAllRegisteredPlayers_Payload) returns (Events_GetAllRegisteredPlayers_Response);
  rpc GetTimerState (Generic_Event_Payload) returns (Events_GetTimerState_Response);
  rpc GetSessionOverview (Games_GetSessionOverview_Payload) returns (Games_GetSessionOverview_Response);
  rpc GetPlayerStats (Players_GetPlayerStats_Payload) returns (Players_GetPlayerStats_Response);
  rpc AddRound (Games_AddRound_Payload) returns (Games_AddRound_Response);
  rpc PreviewRound (Games_PreviewRound_Payload) returns (Games_PreviewRound_Response);
  rpc AddOnlineReplay (Games_AddOnlineReplay_Payload) returns (Games_AddOnlineReplay_Response);
  rpc GetLastResults (Players_GetLastResults_Payload) returns (Players_GetLastResults_Response);
  rpc GetLastRound (Players_GetLastRound_Payload) returns (Players_GetLastRound_Response);
  rpc GetAllRounds (Players_GetAllRounds_Payload) returns (Players_GetAllRounds_Response);
  rpc GetLastRoundByHash (Players_GetLastRoundByHash_Payload) returns (Players_GetLastRoundByHash_Response);
  rpc GetEventForEdit (Events_GetEventForEdit_Payload) returns (Events_GetEventForEdit_Response);
  rpc RebuildScoring (Generic_Event_Payload) returns (Generic_Success_Response);
  rpc CreateEvent (EventData) returns (Generic_Event_Payload); // note: input data is EventData here
  rpc UpdateEvent (Events_UpdateEvent_Payload) returns (Generic_Success_Response);
  rpc FinishEvent (Generic_Event_Payload) returns (Generic_Success_Response);
  rpc ToggleListed (Generic_Event_Payload) returns (Generic_Success_Response);
  rpc GetTablesState (Generic_Event_Payload) returns (Events_GetTablesState_Response);
  rpc StartTimer (Generic_Event_Payload) returns (Generic_Success_Response);
  rpc RegisterPlayer (Events_RegisterPlayer_Payload) returns (Generic_Success_Response);
  rpc UnregisterPlayer (Events_UnregisterPlayer_Payload) returns (Generic_Success_Response);
  rpc UpdatePlayerSeatingFlag (Events_UpdatePlayerSeatingFlag_Payload) returns (Generic_Success_Response);
  rpc GetAchievements (Events_GetAchievements_Payload) returns (Events_GetAchievements_Response);
  rpc GetAchievementsList (Events_GetAchievementsList_Payload) returns (Events_GetAchievementsList_Response);
  rpc ToggleHideResults (Generic_Event_Payload) returns (Generic_Success_Response);
  rpc UpdatePlayersLocalIds (Events_UpdatePlayersLocalIds_Payload) returns (Generic_Success_Response);
  rpc UpdatePlayerReplacement (Events_UpdatePlayerReplacement_Payload) returns (Generic_Success_Response);
  rpc UpdatePlayersTeams (Events_UpdatePlayersTeams_Payload) returns (Generic_Success_Response);
  rpc StartGame (Games_StartGame_Payload) returns (Games_StartGame_Response);
  rpc EndGame (Games_EndGame_Payload) returns (Generic_Success_Response);
  rpc CancelGame (Games_CancelGame_Payload) returns (Generic_Success_Response);
  rpc FinalizeSession (Generic_Event_Payload) returns (Generic_Success_Response);
  rpc DropLastRound (Games_DropLastRound_Payload) returns (Generic_Success_Response);
  rpc DefinalizeGame (Games_DefinalizeGame_Payload) returns (Generic_Success_Response);
  rpc AddPenalty (Games_AddPenalty_Payload) returns (Generic_Success_Response);
  rpc AddPenaltyGame (Games_AddPenaltyGame_Payload) returns (Games_AddPenaltyGame_Response);
  rpc GetPlayer (Players_GetPlayer_Payload) returns (Players_GetPlayer_Response);
  rpc GetCurrentSeating (Generic_Event_Payload) returns (Events_GetCurrentSeating_Response);
  rpc MakeShuffledSeating (Seating_MakeShuffledSeating_Payload) returns (Generic_Success_Response);
  rpc MakeSwissSeating (Generic_Event_Payload) returns (Generic_Success_Response);
  rpc ResetSeating (Generic_Event_Payload) returns (Generic_Success_Response);
  rpc GenerateSwissSeating (Generic_Event_Payload) returns (Seating_GenerateSwissSeating_Response);
  rpc MakeIntervalSeating (Seating_MakeIntervalSeating_Payload) returns (Generic_Success_Response);
  rpc MakePrescriptedSeating (Seating_MakePrescriptedSeating_Payload) returns (Generic_Success_Response);
  rpc GetNextPrescriptedSeating (Generic_Event_Payload) returns (Seating_GetNextPrescriptedSeating_Response);
  rpc GetPrescriptedEventConfig (Generic_Event_Payload) returns (Events_GetPrescriptedEventConfig_Response);
  rpc UpdatePrescriptedEventConfig (Events_UpdatePrescriptedEventConfig_Payload) returns (Generic_Success_Response);
  rpc InitStartingTimer (Generic_Event_Payload) returns (Generic_Success_Response);
  rpc GetStartingTimer (Generic_Event_Payload) returns (Events_GetStartingTimer_Response);
  rpc AddErrorLog (Misc_AddErrorLog_Payload) returns (Generic_Success_Response);
}

message Events_GetRulesets_Payload {}

message Events_GetRulesets_Response {
  repeated RulesetConfig rulesets = 1;
  repeated string rulesetIds = 2;
  repeated string rulesetTitles = 3;
}

message Events_GetTimezones_Payload {
  string addr = 1;
}

message Events_GetTimezones_Response {
  string preferredByIp = 1;
  repeated string timezones = 2;
}

message Events_GetCountries_Payload {
  string addr = 1;
}

message Events_GetCountries_Response {
  string preferredByIp = 1;
  repeated Country countries = 2;
}

message Events_GetEvents_Payload {
  int32 limit = 1;
  int32 offset = 2;
  bool filterUnlisted = 3;
}

message Events_GetEvents_Response {
  int32 total = 1;
  repeated Event events = 2;
}

message Events_GetEventsById_Payload {
  repeated int32 ids = 1;
}

message Events_GetEventsById_Response {
  repeated Event events = 1;
}

message Players_GetMyEvents_Payload {}

message Players_GetMyEvents_Response {
  repeated MyEvent events = 1;
}

message Events_GetRatingTable_Payload {
  repeated int32 eventIdList = 1;
  string orderBy = 2;
  string order = 3;
  bool withPrefinished = 4;
}

message Events_GetRatingTable_Response {
  repeated PlayerInRating list = 1;
}

message Events_GetLastGames_Payload {
  repeated int32 eventIdList = 1;
  int32 limit = 2;
  int32 offset = 3;
  optional string orderBy = 4;
  optional string order = 5;
}

message Events_GetLastGames_Response {
  repeated GameResult games = 1;
  repeated Player players = 2;
  int32 totalGames = 3;
}

message Events_GetGame_Payload {
  string sessionHash = 1;
}

message Events_GetGame_Response {
  GameResult game = 1;
  repeated Player players = 2;
}

message Events_GetGamesSeries_Response {
  repeated SeriesResult results = 1;
}

message Players_GetCurrentSessions_Payload {
  int32 playerId = 1;
  int32 eventId = 2;
}

message Players_GetCurrentSessions_Response {
  repeated CurrentSession sessions = 1;
}

message Events_GetAllRegisteredPlayers_Payload {
  repeated int32 eventIds = 1;
}

message Events_GetAllRegisteredPlayers_Response {
  repeated RegisteredPlayer players = 1;
}

message Events_GetTimerState_Response {
  bool started = 1;
  bool finished = 2;
  int32 timeRemaining = 3;
  bool waitingForTimer = 4;
  bool haveAutostart = 5;
  bool autostartTimer = 6;
}

message Games_GetSessionOverview_Payload {
  string sessionHash = 1;
}

message Games_GetSessionOverview_Response {
  int32 id = 1;
  int32 eventId = 2;
  optional int32 tableIndex = 3;
  repeated PlayerInSession players = 4;
  SessionState state = 5;
}

message Players_GetPlayerStats_Payload {
  int32 playerId = 1;
  repeated int32 eventIdList = 2;
}

message Players_GetPlayerStats_Response {
  repeated int32 ratingHistory = 1;
  repeated SessionHistoryResultTable scoreHistory = 2;
  repeated Player playersInfo = 3;
  repeated PlacesSummaryItem placesSummary = 4;
  int32 totalPlayedGames = 5;
  int32 totalPlayedRounds = 6;
  PlayerWinSummary winSummary = 7;
  repeated HandValueStat handsValueSummary = 8;
  repeated YakuStat yakuSummary = 9;
  RiichiSummary riichiSummary = 10;
  DoraSummary doraStat = 11;
}

message Games_AddRound_Payload {
  string sessionHash = 1;
  Round roundData = 2;
}

message Games_AddRound_Response {
  repeated IntermediateResultOfSession scores = 1;
  repeated Penalty extraPenaltyLog = 2;
  int32 round = 3; // current round number
  int32 honba = 4;
  int32 riichiBets = 5; // on the table from previous round
  bool prematurelyFinished = 6; // if game has been finished prematurely (e.g. by timeout)
  bool roundJustChanged = 7; // True if round has just changed useful to determine if current 4e or 4s is first one, no matter what honba count is. (Possible situation: draw in 3s or 3e, so first 4e or 4s has honba).
  bool isFinished = 8;
  bool lastHandStarted = 9; // True if ending policy is "oneMoreHand" AND this hand was started.
  optional RoundOutcome lastOutcome = 10; // Outcome of previously recorded round. Useful to determine if certain rules should be applied in current case, e.g., agariyame should not be applied on chombo or abortive draw.
}

message Games_PreviewRound_Payload {
  string sessionHash = 1;
  Round roundData = 2;
}

message Games_PreviewRound_Response {
  RoundState state = 1;
}

message Games_AddOnlineReplay_Payload {
  int32 eventId = 1;
  string link = 2;
}

message Games_AddOnlineReplay_Response {
  GameResult game = 1;
  repeated Player players = 2;
}

message Players_GetLastResults_Payload {
  int32 playerId = 1;
  int32 eventId = 2;
}

message Players_GetLastResults_Response {
  repeated SessionHistoryResult results = 1;
}

message Players_GetLastRound_Payload {
  int32 playerId = 1;
  int32 eventId = 2;
}

message Players_GetLastRound_Response {
  RoundState round = 1;
}

message Players_GetAllRounds_Payload {
  string sessionHash = 1;
}

message Players_GetAllRounds_Response {
  repeated RoundState round = 1;
}

message Players_GetLastRoundByHash_Payload {
  string sessionHash = 1;
}

message Players_GetLastRoundByHash_Response {
  RoundState round = 1;
}

message Events_GetEventForEdit_Payload {
  int32 id = 1;
}

message Events_GetEventForEdit_Response {
  int32 id = 1;
  EventData event = 2;
}

message Events_UpdateEvent_Payload {
  int32 id = 1;
  EventData event = 2;
}

message Events_GetTablesState_Response {
  repeated TableState tables = 1;
}

message Events_RegisterPlayer_Payload {
  int32 playerId = 1;
  int32 eventId = 2;
}

message Events_UnregisterPlayer_Payload {
  int32 playerId = 1;
  int32 eventId = 2;
}

message Events_UpdatePlayerSeatingFlag_Payload {
  int32 playerId = 1;
  int32 eventId = 2;
  bool ignoreSeating = 3;
}

message Events_GetAchievements_Payload {
  repeated int32 eventIds = 1;
  repeated string achievementsList = 2;
}

message Events_GetAchievements_Response {
  repeated Achievement achievements = 1;
}

message Events_GetAchievementsList_Payload {}

message Events_GetAchievementsList_Response {
  repeated string list = 1;
}

message Events_UpdatePlayersLocalIds_Payload {
  int32 eventId = 1;
  repeated LocalIdMapping idMap = 2;
}

message Events_UpdatePlayerReplacement_Payload {
  int32 playerId = 1;
  int32 eventId = 2;
  int32 replacementId = 3;
}

message Events_UpdatePlayersTeams_Payload {
  int32 eventId = 1;
  repeated TeamMapping teamNameMap = 2;
}

message Games_StartGame_Payload {
  int32 eventId = 1;
  repeated int32 players = 2; // ids list, e-s-w-n
}

message Games_StartGame_Response {
  string sessionHash = 1;
}

message Games_EndGame_Payload {
  string sessionHash = 1;
}

message Games_CancelGame_Payload {
  string sessionHash = 1;
}

message Games_DropLastRound_Payload {
  string sessionHash = 1;
}

message Games_DefinalizeGame_Payload {
  string sessionHash = 1;
}

message Games_AddPenalty_Payload {
  int32 eventId = 1;
  int32 playerId = 2;
  int32 amount = 3;
  string reason = 4;
}

message Games_AddPenaltyGame_Payload {
  int32 eventId = 1;
  repeated int32 players = 2; // ids, e-s-w-n
}

message Games_AddPenaltyGame_Response {
  string hash = 1;
}

message Players_GetPlayer_Payload {
  int32 id = 1;
}

message Players_GetPlayer_Response {
  Player players = 1;
}

message Events_GetCurrentSeating_Response {
  repeated PlayerSeating seating = 1;
}

message Seating_MakeShuffledSeating_Payload {
  int32 eventId = 1;
  int32 groupsCount = 2;
  int32 seed = 3; // randomness factor
}

message Seating_GenerateSwissSeating_Response {
  repeated TableItemSwiss tables = 1;
}

message Seating_MakeIntervalSeating_Payload {
  int32 eventId = 1;
  int32 step = 2;
}

message Seating_MakePrescriptedSeating_Payload {
  int32 eventId = 1;
  bool randomizeAtTables = 2;
}

message Seating_GetNextPrescriptedSeating_Response {
  repeated PrescriptedTable tables = 1;
}

message Events_GetPrescriptedEventConfig_Response {
  int32 eventId = 1;
  int32 nextSessionIndex = 2;
  optional string prescript = 3;
  repeated string errors = 4;
}

message Events_UpdatePrescriptedEventConfig_Payload {
  int32 eventId = 1;
  int32 nextSessionIndex = 2;
  string prescript = 3;
}

message Events_GetStartingTimer_Response {
  int32 timer = 1; // seconds to start
}

message Misc_AddErrorLog_Payload {
  string facility = 1;
  string sessionHash = 2;
  int32 playerId = 3;
  string error = 4;
  string stack = 5;
}
