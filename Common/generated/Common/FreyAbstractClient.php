<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT! (protoc-gen-twirp_php 0.9.1)
# source: proto/frey.proto

declare(strict_types=1);

namespace Common;

use Google\Protobuf\Internal\Message;
use Http\Discovery\Psr17FactoryDiscovery;
use Http\Discovery\Psr18ClientDiscovery;
use Psr\Http\Client\ClientInterface;
use Psr\Http\Message\RequestFactoryInterface;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\StreamFactoryInterface;
use Twirp\Context;
use Twirp\Error;
use Twirp\ErrorCode;

/**
 * @internal FreyAbstractClient provides abstraction for JsonClient and Client (default).
 * Note that you MUST NOT use it directly! It is an internal implementation detail that is not
 * covered by backward compatibility promise. The only thing that will and should remain backward
 * compatible is the two clients.
 */
abstract class FreyAbstractClient
{
    /**
     * @var server
     */
    protected $addr;

    /**
     * @var ClientInterface
     */
    protected $httpClient;

    /**
     * @var RequestFactoryInterface
     */
    protected $requestFactory;

    /**
     * @var StreamFactoryInterface
     */
    protected $streamFactory;

    /**
     * @var string
     */
    protected $prefix;

    public function __construct(
        $addr,
        ClientInterface $httpClient = null,
        RequestFactoryInterface $requestFactory = null,
        StreamFactoryInterface $streamFactory = null,
        string $prefix = '/twirp'
    ) {
        if ($httpClient === null) {
            $httpClient = Psr18ClientDiscovery::find();
        }

        if ($requestFactory === null) {
            $requestFactory = Psr17FactoryDiscovery::findRequestFactory();
        }

        if ($streamFactory === null) {
            $streamFactory = Psr17FactoryDiscovery::findStreamFactory();
        }

        $this->addr = $this->urlBase($addr);
        $this->httpClient = $httpClient;
        $this->requestFactory = $requestFactory;
        $this->streamFactory = $streamFactory;
        $this->prefix = ltrim(rtrim($prefix, '/'), '/');
    }

    /**
     * {@inheritdoc}
     */
    public function RequestRegistration(array $ctx, \Common\Auth_RequestRegistration_Payload $in): \Common\Auth_RequestRegistration_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Frey');
        $ctx = Context::withMethodName($ctx, 'RequestRegistration');

        $out = new \Common\Auth_RequestRegistration_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Frey/RequestRegistration';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Frey/RequestRegistration';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function ApproveRegistration(array $ctx, \Common\Auth_ApproveRegistration_Payload $in): \Common\Auth_ApproveRegistration_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Frey');
        $ctx = Context::withMethodName($ctx, 'ApproveRegistration');

        $out = new \Common\Auth_ApproveRegistration_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Frey/ApproveRegistration';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Frey/ApproveRegistration';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function Authorize(array $ctx, \Common\Auth_Authorize_Payload $in): \Common\Auth_Authorize_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Frey');
        $ctx = Context::withMethodName($ctx, 'Authorize');

        $out = new \Common\Auth_Authorize_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Frey/Authorize';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Frey/Authorize';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function QuickAuthorize(array $ctx, \Common\Auth_QuickAuthorize_Payload $in): \Common\Auth_QuickAuthorize_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Frey');
        $ctx = Context::withMethodName($ctx, 'QuickAuthorize');

        $out = new \Common\Auth_QuickAuthorize_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Frey/QuickAuthorize';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Frey/QuickAuthorize';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function Me(array $ctx, \Common\Auth_Me_Payload $in): \Common\Auth_Me_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Frey');
        $ctx = Context::withMethodName($ctx, 'Me');

        $out = new \Common\Auth_Me_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Frey/Me';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Frey/Me';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function ChangePassword(array $ctx, \Common\Auth_ChangePassword_Payload $in): \Common\Auth_ChangePassword_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Frey');
        $ctx = Context::withMethodName($ctx, 'ChangePassword');

        $out = new \Common\Auth_ChangePassword_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Frey/ChangePassword';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Frey/ChangePassword';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function RequestResetPassword(array $ctx, \Common\Auth_RequestResetPassword_Payload $in): \Common\Auth_RequestResetPassword_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Frey');
        $ctx = Context::withMethodName($ctx, 'RequestResetPassword');

        $out = new \Common\Auth_RequestResetPassword_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Frey/RequestResetPassword';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Frey/RequestResetPassword';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function ApproveResetPassword(array $ctx, \Common\Auth_ApproveResetPassword_Payload $in): \Common\Auth_ApproveResetPassword_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Frey');
        $ctx = Context::withMethodName($ctx, 'ApproveResetPassword');

        $out = new \Common\Auth_ApproveResetPassword_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Frey/ApproveResetPassword';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Frey/ApproveResetPassword';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function GetAccessRules(array $ctx, \Common\Access_GetAccessRules_Payload $in): \Common\Access_GetAccessRules_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Frey');
        $ctx = Context::withMethodName($ctx, 'GetAccessRules');

        $out = new \Common\Access_GetAccessRules_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Frey/GetAccessRules';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Frey/GetAccessRules';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function GetRuleValue(array $ctx, \Common\Access_GetRuleValue_Payload $in): \Common\Access_GetRuleValue_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Frey');
        $ctx = Context::withMethodName($ctx, 'GetRuleValue');

        $out = new \Common\Access_GetRuleValue_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Frey/GetRuleValue';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Frey/GetRuleValue';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function UpdatePersonalInfo(array $ctx, \Common\Persons_UpdatePersonalInfo_Payload $in): \Common\Generic_Success_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Frey');
        $ctx = Context::withMethodName($ctx, 'UpdatePersonalInfo');

        $out = new \Common\Generic_Success_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Frey/UpdatePersonalInfo';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Frey/UpdatePersonalInfo';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function GetPersonalInfo(array $ctx, \Common\Persons_GetPersonalInfo_Payload $in): \Common\Persons_GetPersonalInfo_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Frey');
        $ctx = Context::withMethodName($ctx, 'GetPersonalInfo');

        $out = new \Common\Persons_GetPersonalInfo_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Frey/GetPersonalInfo';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Frey/GetPersonalInfo';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function FindByTenhouIds(array $ctx, \Common\Persons_FindByTenhouIds_Payload $in): \Common\Persons_FindByTenhouIds_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Frey');
        $ctx = Context::withMethodName($ctx, 'FindByTenhouIds');

        $out = new \Common\Persons_FindByTenhouIds_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Frey/FindByTenhouIds';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Frey/FindByTenhouIds';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function FindByTitle(array $ctx, \Common\Persons_FindByTitle_Payload $in): \Common\Persons_FindByTitle_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Frey');
        $ctx = Context::withMethodName($ctx, 'FindByTitle');

        $out = new \Common\Persons_FindByTitle_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Frey/FindByTitle';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Frey/FindByTitle';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function GetGroups(array $ctx, \Common\Persons_GetGroups_Payload $in): \Common\Persons_GetGroups_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Frey');
        $ctx = Context::withMethodName($ctx, 'GetGroups');

        $out = new \Common\Persons_GetGroups_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Frey/GetGroups';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Frey/GetGroups';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function GetEventAdmins(array $ctx, \Common\Access_GetEventAdmins_Payload $in): \Common\Access_GetEventAdmins_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Frey');
        $ctx = Context::withMethodName($ctx, 'GetEventAdmins');

        $out = new \Common\Access_GetEventAdmins_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Frey/GetEventAdmins';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Frey/GetEventAdmins';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function GetSuperadminFlag(array $ctx, \Common\Access_GetSuperadminFlag_Payload $in): \Common\Access_GetSuperadminFlag_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Frey');
        $ctx = Context::withMethodName($ctx, 'GetSuperadminFlag');

        $out = new \Common\Access_GetSuperadminFlag_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Frey/GetSuperadminFlag';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Frey/GetSuperadminFlag';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function GetOwnedEventIds(array $ctx, \Common\Access_GetOwnedEventIds_Payload $in): \Common\Access_GetOwnedEventIds_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Frey');
        $ctx = Context::withMethodName($ctx, 'GetOwnedEventIds');

        $out = new \Common\Access_GetOwnedEventIds_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Frey/GetOwnedEventIds';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Frey/GetOwnedEventIds';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function GetRulesList(array $ctx, \Common\Access_GetRulesList_Payload $in): \Common\Access_GetRulesList_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Frey');
        $ctx = Context::withMethodName($ctx, 'GetRulesList');

        $out = new \Common\Access_GetRulesList_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Frey/GetRulesList';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Frey/GetRulesList';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function GetAllEventRules(array $ctx, \Common\Access_GetAllEventRules_Payload $in): \Common\Access_GetAllEventRules_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Frey');
        $ctx = Context::withMethodName($ctx, 'GetAllEventRules');

        $out = new \Common\Access_GetAllEventRules_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Frey/GetAllEventRules';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Frey/GetAllEventRules';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function GetPersonAccess(array $ctx, \Common\Access_GetPersonAccess_Payload $in): \Common\Access_GetPersonAccess_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Frey');
        $ctx = Context::withMethodName($ctx, 'GetPersonAccess');

        $out = new \Common\Access_GetPersonAccess_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Frey/GetPersonAccess';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Frey/GetPersonAccess';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function GetGroupAccess(array $ctx, \Common\Access_GetGroupAccess_Payload $in): \Common\Access_GetGroupAccess_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Frey');
        $ctx = Context::withMethodName($ctx, 'GetGroupAccess');

        $out = new \Common\Access_GetGroupAccess_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Frey/GetGroupAccess';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Frey/GetGroupAccess';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function GetAllPersonAccess(array $ctx, \Common\Access_GetAllPersonAccess_Payload $in): \Common\Access_GetAllPersonAccess_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Frey');
        $ctx = Context::withMethodName($ctx, 'GetAllPersonAccess');

        $out = new \Common\Access_GetAllPersonAccess_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Frey/GetAllPersonAccess';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Frey/GetAllPersonAccess';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function GetAllGroupAccess(array $ctx, \Common\Access_GetAllGroupAccess_Payload $in): \Common\Access_GetAllGroupAccess_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Frey');
        $ctx = Context::withMethodName($ctx, 'GetAllGroupAccess');

        $out = new \Common\Access_GetAllGroupAccess_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Frey/GetAllGroupAccess';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Frey/GetAllGroupAccess';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function AddRuleForPerson(array $ctx, \Common\Access_AddRuleForPerson_Payload $in): \Common\Access_AddRuleForPerson_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Frey');
        $ctx = Context::withMethodName($ctx, 'AddRuleForPerson');

        $out = new \Common\Access_AddRuleForPerson_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Frey/AddRuleForPerson';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Frey/AddRuleForPerson';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function AddRuleForGroup(array $ctx, \Common\Access_AddRuleForGroup_Payload $in): \Common\Access_AddRuleForGroup_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Frey');
        $ctx = Context::withMethodName($ctx, 'AddRuleForGroup');

        $out = new \Common\Access_AddRuleForGroup_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Frey/AddRuleForGroup';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Frey/AddRuleForGroup';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function UpdateRuleForPerson(array $ctx, \Common\Access_UpdateRuleForPerson_Payload $in): \Common\Generic_Success_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Frey');
        $ctx = Context::withMethodName($ctx, 'UpdateRuleForPerson');

        $out = new \Common\Generic_Success_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Frey/UpdateRuleForPerson';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Frey/UpdateRuleForPerson';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function UpdateRuleForGroup(array $ctx, \Common\Access_UpdateRuleForGroup_Payload $in): \Common\Generic_Success_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Frey');
        $ctx = Context::withMethodName($ctx, 'UpdateRuleForGroup');

        $out = new \Common\Generic_Success_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Frey/UpdateRuleForGroup';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Frey/UpdateRuleForGroup';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function DeleteRuleForPerson(array $ctx, \Common\Access_DeleteRuleForPerson_Payload $in): \Common\Generic_Success_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Frey');
        $ctx = Context::withMethodName($ctx, 'DeleteRuleForPerson');

        $out = new \Common\Generic_Success_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Frey/DeleteRuleForPerson';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Frey/DeleteRuleForPerson';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function DeleteRuleForGroup(array $ctx, \Common\Access_DeleteRuleForGroup_Payload $in): \Common\Generic_Success_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Frey');
        $ctx = Context::withMethodName($ctx, 'DeleteRuleForGroup');

        $out = new \Common\Generic_Success_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Frey/DeleteRuleForGroup';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Frey/DeleteRuleForGroup';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function ClearAccessCache(array $ctx, \Common\Access_ClearAccessCache_Payload $in): \Common\Generic_Success_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Frey');
        $ctx = Context::withMethodName($ctx, 'ClearAccessCache');

        $out = new \Common\Generic_Success_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Frey/ClearAccessCache';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Frey/ClearAccessCache';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function CreateAccount(array $ctx, \Common\Persons_CreateAccount_Payload $in): \Common\Persons_CreateAccount_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Frey');
        $ctx = Context::withMethodName($ctx, 'CreateAccount');

        $out = new \Common\Persons_CreateAccount_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Frey/CreateAccount';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Frey/CreateAccount';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function CreateGroup(array $ctx, \Common\Persons_CreateGroup_Payload $in): \Common\Persons_CreateGroup_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Frey');
        $ctx = Context::withMethodName($ctx, 'CreateGroup');

        $out = new \Common\Persons_CreateGroup_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Frey/CreateGroup';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Frey/CreateGroup';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function UpdateGroup(array $ctx, \Common\Persons_UpdateGroup_Payload $in): \Common\Generic_Success_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Frey');
        $ctx = Context::withMethodName($ctx, 'UpdateGroup');

        $out = new \Common\Generic_Success_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Frey/UpdateGroup';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Frey/UpdateGroup';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function DeleteGroup(array $ctx, \Common\Persons_DeleteGroup_Payload $in): \Common\Generic_Success_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Frey');
        $ctx = Context::withMethodName($ctx, 'DeleteGroup');

        $out = new \Common\Generic_Success_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Frey/DeleteGroup';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Frey/DeleteGroup';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function AddPersonToGroup(array $ctx, \Common\Persons_AddPersonToGroup_Payload $in): \Common\Generic_Success_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Frey');
        $ctx = Context::withMethodName($ctx, 'AddPersonToGroup');

        $out = new \Common\Generic_Success_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Frey/AddPersonToGroup';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Frey/AddPersonToGroup';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function RemovePersonFromGroup(array $ctx, \Common\Persons_RemovePersonFromGroup_Payload $in): \Common\Generic_Success_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Frey');
        $ctx = Context::withMethodName($ctx, 'RemovePersonFromGroup');

        $out = new \Common\Generic_Success_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Frey/RemovePersonFromGroup';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Frey/RemovePersonFromGroup';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function GetPersonsOfGroup(array $ctx, \Common\Persons_GetPersonsOfGroup_Payload $in): \Common\Persons_GetPersonsOfGroup_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Frey');
        $ctx = Context::withMethodName($ctx, 'GetPersonsOfGroup');

        $out = new \Common\Persons_GetPersonsOfGroup_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Frey/GetPersonsOfGroup';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Frey/GetPersonsOfGroup';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function GetGroupsOfPerson(array $ctx, \Common\Persons_GetGroupsOfPerson_Payload $in): \Common\Persons_GetGroupsOfPerson_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Frey');
        $ctx = Context::withMethodName($ctx, 'GetGroupsOfPerson');

        $out = new \Common\Persons_GetGroupsOfPerson_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Frey/GetGroupsOfPerson';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Frey/GetGroupsOfPerson';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function AddSystemWideRuleForPerson(array $ctx, \Common\Access_AddSystemWideRuleForPerson_Payload $in): \Common\Access_AddSystemWideRuleForPerson_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Frey');
        $ctx = Context::withMethodName($ctx, 'AddSystemWideRuleForPerson');

        $out = new \Common\Access_AddSystemWideRuleForPerson_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Frey/AddSystemWideRuleForPerson';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Frey/AddSystemWideRuleForPerson';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function AddSystemWideRuleForGroup(array $ctx, \Common\Access_AddSystemWideRuleForGroup_Payload $in): \Common\Access_AddSystemWideRuleForGroup_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Frey');
        $ctx = Context::withMethodName($ctx, 'AddSystemWideRuleForGroup');

        $out = new \Common\Access_AddSystemWideRuleForGroup_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Frey/AddSystemWideRuleForGroup';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Frey/AddSystemWideRuleForGroup';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * Common code to make a request to the remote twirp service.
     */
    abstract protected function doRequest(array $ctx, string $url, Message $in, Message $out): void;

    /**
     * Makes an HTTP request and adds common headers.
     */
    protected function newRequest(array $ctx, string $url, string $reqBody, string $contentType): RequestInterface
    {
        $body = $this->streamFactory->createStream($reqBody);

        $req = $this->requestFactory->createRequest('POST', $url);

        $headers = Context::httpRequestHeaders($ctx);

        foreach ($headers as $key => $value) {
            $req = $req->withHeader($key, $value);
        }

        return $req
            ->withBody($body)
            ->withHeader('Accept', $contentType)
            ->withHeader('Content-Type', $contentType)
            ->withHeader('Twirp-Version', 'v8.1.0')
            ->withHeader('TwirPHP-Version', '0.9.1')
        ;
    }

    /**
     * Adds consistency to errors generated in the client.
     */
    protected function clientError(string $desc, \Throwable $e): TwirpError
    {
        return TwirpError::newError(ErrorCode::Internal, sprintf('%s: %s', $desc, $e->getMessage()), $e);
    }

    /**
     * Builds a twirp Error from a non-200 HTTP response.
     * If the response has a valid serialized Twirp error, then it's returned.
     * If not, the response status code is used to generate a similar twirp
     * error. {@see self::twirpErrorFromIntermediary} for more info on intermediary errors.
     */
    protected function errorFromResponse(ResponseInterface $resp): TwirpError
    {
        $statusCode = $resp->getStatusCode();
        $statusText = $resp->getReasonPhrase();

        if ($this->isHttpRedirect($statusCode)) {
            // Unexpected redirect: it must be an error from an intermediary.
            // Twirp clients don't follow redirects automatically, Twirp only handles
            // POST requests, redirects should only happen on GET and HEAD requests.
            $location = $resp->getHeaderLine('Location');
            $msg = sprintf(
                'unexpected HTTP status code %d "%s" received, Location="%s"',
                $statusCode,
                $statusText,
                $location
            );

            return $this->twirpErrorFromIntermediary($statusCode, $msg, $location);
        }

        $body = (string)$resp->getBody();

        $rawError = json_decode($body, true);
        if ($rawError === null) {
            $msg = sprintf('error from intermediary with HTTP status code %d "%s"', $statusCode, $statusText);

            return $this->twirpErrorFromIntermediary($statusCode, $msg, $body);
        }

        $rawError = $rawError + ['code' => '', 'msg' => '', 'meta' => []];

        if (ErrorCode::isValid($rawError['code']) === false) {
            $msg = 'invalid type returned from server error response: '.$rawError['code'];

            return TwirpError::newError(ErrorCode::Internal, $msg);
        }

        $error = TwirpError::newError($rawError['code'], $rawError['msg']);

        foreach ($rawError['meta'] as $key => $value) {
           $error->setMeta($key, $value);
        }

        return $error;
    }

    /**
     * Maps HTTP errors from non-twirp sources to twirp errors.
     * The mapping is similar to gRPC: https://github.com/grpc/grpc/blob/master/doc/http-grpc-status-mapping.md.
     * Returned twirp Errors have some additional metadata for inspection.
     */
    protected function twirpErrorFromIntermediary(int $status, string $msg, string $bodyOrLocation): TwirpError
    {
        if ($this->isHttpRedirect($status)) {
            $code = ErrorCode::Internal;
        } else {
            switch ($status) {
                case 400: // Bad Request
                    $code = ErrorCode::Internal;
                    break;
                case 401: // Unauthorized
                    $code = ErrorCode::Unauthenticated;
                    break;
                case 403: // Forbidden
                    $code = ErrorCode::PermissionDenied;
                    break;
                case 404: // Not Found
                    $code = ErrorCode::BadRoute;
                    break;
                case 429: // Too Many Requests
                    $code = ErrorCode::ResourceExhausted;
                    break;
                case 502: // Bad Gateway
                case 503: // Service Unavailable
                case 504: // Gateway Timeout
                    $code = ErrorCode::Unavailable;
                    break;
                default: // All other codes
                    $code = ErrorCode::Unknown;
                    break;
            }
        }

        $error = TwirpError::newError($code, $msg);
        $error->setMeta('http_error_from_intermediary', 'true');
        $error->setMeta('status_code', (string)$status);

        if ($this->isHttpRedirect($status)) {
            $error->setMeta('location', $bodyOrLocation);
        } else {
            $error->setMeta('body', $bodyOrLocation);
        }

        return $error;
    }

    protected function isHttpRedirect(int $status): bool
    {
        return $status >= 300 && $status <= 399;
    }

    protected function urlBase(string $addr): string
    {
        $scheme = parse_url($addr, PHP_URL_SCHEME);

        // If parse_url fails, return the addr unchanged.
        if ($scheme === false) {
            return $addr;
        }

        // If the addr does not specify a scheme, default to http.
        if (empty($scheme)) {
            $addr = 'http://'.ltrim($addr, ':/');
        }

        return $addr;
    }
}
