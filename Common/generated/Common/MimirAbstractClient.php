<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT! (protoc-gen-twirp_php 0.9.1)
# source: mimir.proto

declare(strict_types=1);

namespace Common;

use Google\Protobuf\Internal\Message;
use Http\Discovery\Psr17FactoryDiscovery;
use Http\Discovery\Psr18ClientDiscovery;
use Psr\Http\Client\ClientInterface;
use Psr\Http\Message\RequestFactoryInterface;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\StreamFactoryInterface;
use Twirp\Context;
use Twirp\Error;
use Twirp\ErrorCode;

/**
 * @internal MimirAbstractClient provides abstraction for JsonClient and Client (default).
 * Note that you MUST NOT use it directly! It is an internal implementation detail that is not
 * covered by backward compatibility promise. The only thing that will and should remain backward
 * compatible is the two clients.
 */
abstract class MimirAbstractClient
{
    /**
     * @var server
     */
    protected $addr;

    /**
     * @var ClientInterface
     */
    protected $httpClient;

    /**
     * @var RequestFactoryInterface
     */
    protected $requestFactory;

    /**
     * @var StreamFactoryInterface
     */
    protected $streamFactory;

    /**
     * @var string
     */
    protected $prefix;

    public function __construct(
        $addr,
        ClientInterface $httpClient = null,
        RequestFactoryInterface $requestFactory = null,
        StreamFactoryInterface $streamFactory = null,
        string $prefix = '/twirp'
    ) {
        if ($httpClient === null) {
            $httpClient = Psr18ClientDiscovery::find();
        }

        if ($requestFactory === null) {
            $requestFactory = Psr17FactoryDiscovery::findRequestFactory();
        }

        if ($streamFactory === null) {
            $streamFactory = Psr17FactoryDiscovery::findStreamFactory();
        }

        $this->addr = $this->urlBase($addr);
        $this->httpClient = $httpClient;
        $this->requestFactory = $requestFactory;
        $this->streamFactory = $streamFactory;
        $this->prefix = ltrim(rtrim($prefix, '/'), '/');
    }

    /**
     * {@inheritdoc}
     */
    public function GetRulesets(array $ctx, \Common\Events_GetRulesets_Payload $in): \Common\Events_GetRulesets_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'GetRulesets');

        $out = new \Common\Events_GetRulesets_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Mimir/GetRulesets';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Mimir/GetRulesets';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function GetTimezones(array $ctx, \Common\Events_GetTimezones_Payload $in): \Common\Events_GetTimezones_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'GetTimezones');

        $out = new \Common\Events_GetTimezones_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Mimir/GetTimezones';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Mimir/GetTimezones';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function GetCountries(array $ctx, \Common\Events_GetCountries_Payload $in): \Common\Events_GetCountries_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'GetCountries');

        $out = new \Common\Events_GetCountries_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Mimir/GetCountries';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Mimir/GetCountries';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function GetEvents(array $ctx, \Common\Events_GetEvents_Payload $in): \Common\Events_GetEvents_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'GetEvents');

        $out = new \Common\Events_GetEvents_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Mimir/GetEvents';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Mimir/GetEvents';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function GetEventsById(array $ctx, \Common\Events_GetEventsById_Payload $in): \Common\Events_GetEventsById_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'GetEventsById');

        $out = new \Common\Events_GetEventsById_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Mimir/GetEventsById';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Mimir/GetEventsById';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function GetMyEvents(array $ctx, \Common\Players_GetMyEvents_Payload $in): \Common\Players_GetMyEvents_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'GetMyEvents');

        $out = new \Common\Players_GetMyEvents_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Mimir/GetMyEvents';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Mimir/GetMyEvents';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function GetGameConfig(array $ctx, \Common\Generic_Event_Payload $in): \Common\GameConfig
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'GetGameConfig');

        $out = new \Common\GameConfig();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Mimir/GetGameConfig';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Mimir/GetGameConfig';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function GetRatingTable(array $ctx, \Common\Events_GetRatingTable_Payload $in): \Common\Events_GetRatingTable_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'GetRatingTable');

        $out = new \Common\Events_GetRatingTable_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Mimir/GetRatingTable';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Mimir/GetRatingTable';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function GetLastGames(array $ctx, \Common\Events_GetLastGames_Payload $in): \Common\Events_GetLastGames_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'GetLastGames');

        $out = new \Common\Events_GetLastGames_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Mimir/GetLastGames';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Mimir/GetLastGames';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function GetGame(array $ctx, \Common\Events_GetGame_Payload $in): \Common\Events_GetGame_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'GetGame');

        $out = new \Common\Events_GetGame_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Mimir/GetGame';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Mimir/GetGame';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function GetGamesSeries(array $ctx, \Common\Generic_Event_Payload $in): \Common\Events_GetGamesSeries_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'GetGamesSeries');

        $out = new \Common\Events_GetGamesSeries_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Mimir/GetGamesSeries';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Mimir/GetGamesSeries';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function GetCurrentSessions(array $ctx, \Common\Players_GetCurrentSessions_Payload $in): \Common\Players_GetCurrentSessions_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'GetCurrentSessions');

        $out = new \Common\Players_GetCurrentSessions_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Mimir/GetCurrentSessions';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Mimir/GetCurrentSessions';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function GetAllRegisteredPlayers(array $ctx, \Common\Events_GetAllRegisteredPlayers_Payload $in): \Common\Events_GetAllRegisteredPlayers_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'GetAllRegisteredPlayers');

        $out = new \Common\Events_GetAllRegisteredPlayers_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Mimir/GetAllRegisteredPlayers';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Mimir/GetAllRegisteredPlayers';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function GetTimerState(array $ctx, \Common\Generic_Event_Payload $in): \Common\Events_GetTimerState_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'GetTimerState');

        $out = new \Common\Events_GetTimerState_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Mimir/GetTimerState';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Mimir/GetTimerState';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function GetSessionOverview(array $ctx, \Common\Games_GetSessionOverview_Payload $in): \Common\Games_GetSessionOverview_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'GetSessionOverview');

        $out = new \Common\Games_GetSessionOverview_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Mimir/GetSessionOverview';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Mimir/GetSessionOverview';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function GetPlayerStats(array $ctx, \Common\Players_GetPlayerStats_Payload $in): \Common\Players_GetPlayerStats_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'GetPlayerStats');

        $out = new \Common\Players_GetPlayerStats_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Mimir/GetPlayerStats';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Mimir/GetPlayerStats';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function AddRound(array $ctx, \Common\Games_AddRound_Payload $in): \Common\Games_AddRound_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'AddRound');

        $out = new \Common\Games_AddRound_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Mimir/AddRound';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Mimir/AddRound';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function PreviewRound(array $ctx, \Common\Games_PreviewRound_Payload $in): \Common\Games_PreviewRound_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'PreviewRound');

        $out = new \Common\Games_PreviewRound_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Mimir/PreviewRound';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Mimir/PreviewRound';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function AddOnlineReplay(array $ctx, \Common\Games_AddOnlineReplay_Payload $in): \Common\Games_AddOnlineReplay_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'AddOnlineReplay');

        $out = new \Common\Games_AddOnlineReplay_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Mimir/AddOnlineReplay';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Mimir/AddOnlineReplay';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function GetLastResults(array $ctx, \Common\Players_GetLastResults_Payload $in): \Common\Players_GetLastResults_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'GetLastResults');

        $out = new \Common\Players_GetLastResults_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Mimir/GetLastResults';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Mimir/GetLastResults';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function GetLastRound(array $ctx, \Common\Players_GetLastRound_Payload $in): \Common\Players_GetLastRound_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'GetLastRound');

        $out = new \Common\Players_GetLastRound_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Mimir/GetLastRound';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Mimir/GetLastRound';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function GetAllRounds(array $ctx, \Common\Players_GetAllRounds_Payload $in): \Common\Players_GetAllRounds_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'GetAllRounds');

        $out = new \Common\Players_GetAllRounds_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Mimir/GetAllRounds';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Mimir/GetAllRounds';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function GetLastRoundByHash(array $ctx, \Common\Players_GetLastRoundByHash_Payload $in): \Common\Players_GetLastRoundByHash_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'GetLastRoundByHash');

        $out = new \Common\Players_GetLastRoundByHash_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Mimir/GetLastRoundByHash';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Mimir/GetLastRoundByHash';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function GetEventForEdit(array $ctx, \Common\Events_GetEventForEdit_Payload $in): \Common\Events_GetEventForEdit_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'GetEventForEdit');

        $out = new \Common\Events_GetEventForEdit_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Mimir/GetEventForEdit';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Mimir/GetEventForEdit';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function RebuildScoring(array $ctx, \Common\Generic_Event_Payload $in): \Common\Generic_Success_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'RebuildScoring');

        $out = new \Common\Generic_Success_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Mimir/RebuildScoring';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Mimir/RebuildScoring';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function CreateEvent(array $ctx, \Common\EventData $in): \Common\Generic_Event_Payload
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'CreateEvent');

        $out = new \Common\Generic_Event_Payload();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Mimir/CreateEvent';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Mimir/CreateEvent';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function UpdateEvent(array $ctx, \Common\Events_UpdateEvent_Payload $in): \Common\Generic_Success_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'UpdateEvent');

        $out = new \Common\Generic_Success_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Mimir/UpdateEvent';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Mimir/UpdateEvent';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function FinishEvent(array $ctx, \Common\Generic_Event_Payload $in): \Common\Generic_Success_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'FinishEvent');

        $out = new \Common\Generic_Success_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Mimir/FinishEvent';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Mimir/FinishEvent';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function ToggleListed(array $ctx, \Common\Generic_Event_Payload $in): \Common\Generic_Success_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'ToggleListed');

        $out = new \Common\Generic_Success_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Mimir/ToggleListed';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Mimir/ToggleListed';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function GetTablesState(array $ctx, \Common\Generic_Event_Payload $in): \Common\Events_GetTablesState_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'GetTablesState');

        $out = new \Common\Events_GetTablesState_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Mimir/GetTablesState';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Mimir/GetTablesState';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function StartTimer(array $ctx, \Common\Generic_Event_Payload $in): \Common\Generic_Success_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'StartTimer');

        $out = new \Common\Generic_Success_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Mimir/StartTimer';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Mimir/StartTimer';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function RegisterPlayer(array $ctx, \Common\Events_RegisterPlayer_Payload $in): \Common\Generic_Success_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'RegisterPlayer');

        $out = new \Common\Generic_Success_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Mimir/RegisterPlayer';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Mimir/RegisterPlayer';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function UnregisterPlayer(array $ctx, \Common\Events_UnregisterPlayer_Payload $in): \Common\Generic_Success_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'UnregisterPlayer');

        $out = new \Common\Generic_Success_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Mimir/UnregisterPlayer';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Mimir/UnregisterPlayer';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function UpdatePlayerSeatingFlag(array $ctx, \Common\Events_UpdatePlayerSeatingFlag_Payload $in): \Common\Generic_Success_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'UpdatePlayerSeatingFlag');

        $out = new \Common\Generic_Success_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Mimir/UpdatePlayerSeatingFlag';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Mimir/UpdatePlayerSeatingFlag';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function GetAchievements(array $ctx, \Common\Events_GetAchievements_Payload $in): \Common\Events_GetAchievements_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'GetAchievements');

        $out = new \Common\Events_GetAchievements_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Mimir/GetAchievements';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Mimir/GetAchievements';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function GetAchievementsList(array $ctx, \Common\Events_GetAchievementsList_Payload $in): \Common\Events_GetAchievementsList_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'GetAchievementsList');

        $out = new \Common\Events_GetAchievementsList_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Mimir/GetAchievementsList';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Mimir/GetAchievementsList';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function ToggleHideResults(array $ctx, \Common\Generic_Event_Payload $in): \Common\Generic_Success_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'ToggleHideResults');

        $out = new \Common\Generic_Success_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Mimir/ToggleHideResults';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Mimir/ToggleHideResults';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function UpdatePlayersLocalIds(array $ctx, \Common\Events_UpdatePlayersLocalIds_Payload $in): \Common\Generic_Success_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'UpdatePlayersLocalIds');

        $out = new \Common\Generic_Success_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Mimir/UpdatePlayersLocalIds';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Mimir/UpdatePlayersLocalIds';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function UpdatePlayerReplacement(array $ctx, \Common\Events_UpdatePlayerReplacement_Payload $in): \Common\Generic_Success_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'UpdatePlayerReplacement');

        $out = new \Common\Generic_Success_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Mimir/UpdatePlayerReplacement';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Mimir/UpdatePlayerReplacement';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function UpdatePlayersTeams(array $ctx, \Common\Events_UpdatePlayersTeams_Payload $in): \Common\Generic_Success_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'UpdatePlayersTeams');

        $out = new \Common\Generic_Success_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Mimir/UpdatePlayersTeams';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Mimir/UpdatePlayersTeams';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function StartGame(array $ctx, \Common\Games_StartGame_Payload $in): \Common\Games_StartGame_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'StartGame');

        $out = new \Common\Games_StartGame_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Mimir/StartGame';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Mimir/StartGame';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function EndGame(array $ctx, \Common\Games_EndGame_Payload $in): \Common\Generic_Success_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'EndGame');

        $out = new \Common\Generic_Success_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Mimir/EndGame';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Mimir/EndGame';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function CancelGame(array $ctx, \Common\Games_CancelGame_Payload $in): \Common\Generic_Success_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'CancelGame');

        $out = new \Common\Generic_Success_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Mimir/CancelGame';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Mimir/CancelGame';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function FinalizeSession(array $ctx, \Common\Generic_Event_Payload $in): \Common\Generic_Success_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'FinalizeSession');

        $out = new \Common\Generic_Success_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Mimir/FinalizeSession';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Mimir/FinalizeSession';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function DropLastRound(array $ctx, \Common\Games_DropLastRound_Payload $in): \Common\Generic_Success_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'DropLastRound');

        $out = new \Common\Generic_Success_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Mimir/DropLastRound';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Mimir/DropLastRound';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function DefinalizeGame(array $ctx, \Common\Games_DefinalizeGame_Payload $in): \Common\Generic_Success_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'DefinalizeGame');

        $out = new \Common\Generic_Success_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Mimir/DefinalizeGame';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Mimir/DefinalizeGame';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function AddPenalty(array $ctx, \Common\Games_AddPenalty_Payload $in): \Common\Generic_Success_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'AddPenalty');

        $out = new \Common\Generic_Success_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Mimir/AddPenalty';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Mimir/AddPenalty';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function AddPenaltyGame(array $ctx, \Common\Games_AddPenaltyGame_Payload $in): \Common\Games_AddPenaltyGame_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'AddPenaltyGame');

        $out = new \Common\Games_AddPenaltyGame_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Mimir/AddPenaltyGame';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Mimir/AddPenaltyGame';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function GetPlayer(array $ctx, \Common\Players_GetPlayer_Payload $in): \Common\Players_GetPlayer_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'GetPlayer');

        $out = new \Common\Players_GetPlayer_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Mimir/GetPlayer';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Mimir/GetPlayer';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function GetCurrentSeating(array $ctx, \Common\Generic_Event_Payload $in): \Common\Events_GetCurrentSeating_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'GetCurrentSeating');

        $out = new \Common\Events_GetCurrentSeating_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Mimir/GetCurrentSeating';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Mimir/GetCurrentSeating';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function MakeShuffledSeating(array $ctx, \Common\Seating_MakeShuffledSeating_Payload $in): \Common\Generic_Success_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'MakeShuffledSeating');

        $out = new \Common\Generic_Success_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Mimir/MakeShuffledSeating';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Mimir/MakeShuffledSeating';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function MakeSwissSeating(array $ctx, \Common\Generic_Event_Payload $in): \Common\Generic_Success_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'MakeSwissSeating');

        $out = new \Common\Generic_Success_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Mimir/MakeSwissSeating';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Mimir/MakeSwissSeating';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function ResetSeating(array $ctx, \Common\Generic_Event_Payload $in): \Common\Generic_Success_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'ResetSeating');

        $out = new \Common\Generic_Success_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Mimir/ResetSeating';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Mimir/ResetSeating';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function GenerateSwissSeating(array $ctx, \Common\Generic_Event_Payload $in): \Common\Seating_GenerateSwissSeating_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'GenerateSwissSeating');

        $out = new \Common\Seating_GenerateSwissSeating_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Mimir/GenerateSwissSeating';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Mimir/GenerateSwissSeating';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function MakeIntervalSeating(array $ctx, \Common\Seating_MakeIntervalSeating_Payload $in): \Common\Generic_Success_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'MakeIntervalSeating');

        $out = new \Common\Generic_Success_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Mimir/MakeIntervalSeating';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Mimir/MakeIntervalSeating';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function MakePrescriptedSeating(array $ctx, \Common\Seating_MakePrescriptedSeating_Payload $in): \Common\Generic_Success_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'MakePrescriptedSeating');

        $out = new \Common\Generic_Success_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Mimir/MakePrescriptedSeating';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Mimir/MakePrescriptedSeating';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function GetNextPrescriptedSeating(array $ctx, \Common\Generic_Event_Payload $in): \Common\Seating_GetNextPrescriptedSeating_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'GetNextPrescriptedSeating');

        $out = new \Common\Seating_GetNextPrescriptedSeating_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Mimir/GetNextPrescriptedSeating';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Mimir/GetNextPrescriptedSeating';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function GetPrescriptedEventConfig(array $ctx, \Common\Generic_Event_Payload $in): \Common\Events_GetPrescriptedEventConfig_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'GetPrescriptedEventConfig');

        $out = new \Common\Events_GetPrescriptedEventConfig_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Mimir/GetPrescriptedEventConfig';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Mimir/GetPrescriptedEventConfig';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function UpdatePrescriptedEventConfig(array $ctx, \Common\Events_UpdatePrescriptedEventConfig_Payload $in): \Common\Generic_Success_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'UpdatePrescriptedEventConfig');

        $out = new \Common\Generic_Success_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Mimir/UpdatePrescriptedEventConfig';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Mimir/UpdatePrescriptedEventConfig';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function InitStartingTimer(array $ctx, \Common\Generic_Event_Payload $in): \Common\Generic_Success_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'InitStartingTimer');

        $out = new \Common\Generic_Success_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Mimir/InitStartingTimer';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Mimir/InitStartingTimer';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function GetStartingTimer(array $ctx, \Common\Generic_Event_Payload $in): \Common\Events_GetStartingTimer_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'GetStartingTimer');

        $out = new \Common\Events_GetStartingTimer_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Mimir/GetStartingTimer';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Mimir/GetStartingTimer';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function AddErrorLog(array $ctx, \Common\Misc_AddErrorLog_Payload $in): \Common\Generic_Success_Response
    {
        $ctx = Context::withPackageName($ctx, 'Common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'AddErrorLog');

        $out = new \Common\Generic_Success_Response();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/Common.Mimir/AddErrorLog';
        } else {
            $url = $url.'/'.$this->prefix.'/Common.Mimir/AddErrorLog';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * Common code to make a request to the remote twirp service.
     */
    abstract protected function doRequest(array $ctx, string $url, Message $in, Message $out): void;

    /**
     * Makes an HTTP request and adds common headers.
     */
    protected function newRequest(array $ctx, string $url, string $reqBody, string $contentType): RequestInterface
    {
        $body = $this->streamFactory->createStream($reqBody);

        $req = $this->requestFactory->createRequest('POST', $url);

        $headers = Context::httpRequestHeaders($ctx);

        foreach ($headers as $key => $value) {
            $req = $req->withHeader($key, $value);
        }

        return $req
            ->withBody($body)
            ->withHeader('Accept', $contentType)
            ->withHeader('Content-Type', $contentType)
            ->withHeader('Twirp-Version', 'v8.1.0')
            ->withHeader('TwirPHP-Version', '0.9.1')
        ;
    }

    /**
     * Adds consistency to errors generated in the client.
     */
    protected function clientError(string $desc, \Throwable $e): TwirpError
    {
        return TwirpError::newError(ErrorCode::Internal, sprintf('%s: %s', $desc, $e->getMessage()), $e);
    }

    /**
     * Builds a twirp Error from a non-200 HTTP response.
     * If the response has a valid serialized Twirp error, then it's returned.
     * If not, the response status code is used to generate a similar twirp
     * error. {@see self::twirpErrorFromIntermediary} for more info on intermediary errors.
     */
    protected function errorFromResponse(ResponseInterface $resp): TwirpError
    {
        $statusCode = $resp->getStatusCode();
        $statusText = $resp->getReasonPhrase();

        if ($this->isHttpRedirect($statusCode)) {
            // Unexpected redirect: it must be an error from an intermediary.
            // Twirp clients don't follow redirects automatically, Twirp only handles
            // POST requests, redirects should only happen on GET and HEAD requests.
            $location = $resp->getHeaderLine('Location');
            $msg = sprintf(
                'unexpected HTTP status code %d "%s" received, Location="%s"',
                $statusCode,
                $statusText,
                $location
            );

            return $this->twirpErrorFromIntermediary($statusCode, $msg, $location);
        }

        $body = (string)$resp->getBody();

        $rawError = json_decode($body, true);
        if ($rawError === null) {
            $msg = sprintf('error from intermediary with HTTP status code %d "%s"', $statusCode, $statusText);

            return $this->twirpErrorFromIntermediary($statusCode, $msg, $body);
        }

        $rawError = $rawError + ['code' => '', 'msg' => '', 'meta' => []];

        if (ErrorCode::isValid($rawError['code']) === false) {
            $msg = 'invalid type returned from server error response: '.$rawError['code'];

            return TwirpError::newError(ErrorCode::Internal, $msg);
        }

        $error = TwirpError::newError($rawError['code'], $rawError['msg']);

        foreach ($rawError['meta'] as $key => $value) {
           $error->setMeta($key, $value);
        }

        return $error;
    }

    /**
     * Maps HTTP errors from non-twirp sources to twirp errors.
     * The mapping is similar to gRPC: https://github.com/grpc/grpc/blob/master/doc/http-grpc-status-mapping.md.
     * Returned twirp Errors have some additional metadata for inspection.
     */
    protected function twirpErrorFromIntermediary(int $status, string $msg, string $bodyOrLocation): TwirpError
    {
        if ($this->isHttpRedirect($status)) {
            $code = ErrorCode::Internal;
        } else {
            switch ($status) {
                case 400: // Bad Request
                    $code = ErrorCode::Internal;
                    break;
                case 401: // Unauthorized
                    $code = ErrorCode::Unauthenticated;
                    break;
                case 403: // Forbidden
                    $code = ErrorCode::PermissionDenied;
                    break;
                case 404: // Not Found
                    $code = ErrorCode::BadRoute;
                    break;
                case 429: // Too Many Requests
                    $code = ErrorCode::ResourceExhausted;
                    break;
                case 502: // Bad Gateway
                case 503: // Service Unavailable
                case 504: // Gateway Timeout
                    $code = ErrorCode::Unavailable;
                    break;
                default: // All other codes
                    $code = ErrorCode::Unknown;
                    break;
            }
        }

        $error = TwirpError::newError($code, $msg);
        $error->setMeta('http_error_from_intermediary', 'true');
        $error->setMeta('status_code', (string)$status);

        if ($this->isHttpRedirect($status)) {
            $error->setMeta('location', $bodyOrLocation);
        } else {
            $error->setMeta('body', $bodyOrLocation);
        }

        return $error;
    }

    protected function isHttpRedirect(int $status): bool
    {
        return $status >= 300 && $status <= 399;
    }

    protected function urlBase(string $addr): string
    {
        $scheme = parse_url($addr, PHP_URL_SCHEME);

        // If parse_url fails, return the addr unchanged.
        if ($scheme === false) {
            return $addr;
        }

        // If the addr does not specify a scheme, default to http.
        if (empty($scheme)) {
            $addr = 'http://'.ltrim($addr, ':/');
        }

        return $addr;
    }
}
